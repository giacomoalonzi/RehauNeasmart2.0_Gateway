openapi: '3.0.0'
info:
  title: 'Rehau Neasmart 2.0 Gateway API'
  version: '2.1.0'
  description: API for controlling a Rehau Neasmart 2.0 system via a Modbus gateway.
servers:
  - url: '/api/v1'
tags:
  - name: Zones
    description: 'Operations related to heating/cooling zones'
  - name: Operation
    description: 'Endpoints for managing global system operation mode and state'
  - name: System
    description: 'System-level information like temperature, notifications, and health'
paths:
  /zones:
    get:
      summary: 'List all configured and active zones'
      tags:
        - Zones
      description: Retrieves a list of zones that are defined in the configuration file and are currently active.
      responses:
        '200':
          description: 'A list of configured zones and their status.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ZonesListResponse'
        '503':
          $ref: '#/components/responses/ServiceUnavailable'
  /zones/{base_id}/{zone_id}:
    get:
      summary: 'Get specific zone information'
      tags:
        - Zones
      description: Retrieves the current state, temperature, setpoint, and other details for a single configured zone.
      parameters:
        - name: base_id
          in: path
          required: true
          schema:
            type: integer
            minimum: 1
            maximum: 4
        - name: zone_id
          in: path
          required: true
          schema:
            type: integer
            minimum: 1
            maximum: 12
      responses:
        '200':
          description: 'Detailed information for the specified zone.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Zone'
        '400':
          $ref: '#/components/responses/BadRequest'
        '503':
          $ref: '#/components/responses/ServiceUnavailable'
    post:
      summary: 'Update zone state or setpoint'
      tags:
        - Zones
      description: Update the state and/or setpoint for a specific zone.
      parameters:
        - name: base_id
          in: path
          required: true
          schema:
            type: integer
        - name: zone_id
          in: path
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ZoneUpdateRequest'
      responses:
        '200':
          description: 'Confirmation of the zone update.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ZoneUpdateResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
        '503':
          $ref: '#/components/responses/ServiceUnavailable'
  /operation/mode:
    get:
      summary: 'Get global operation mode'
      tags:
        - Operation
      description: 'Retrieves the current global operation mode of the system (e.g., "auto", "heating").'
      responses:
        '200':
          description: 'Current operation mode.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OperationModeResponse'
        '503':
          $ref: '#/components/responses/ServiceUnavailable'
    post:
      summary: 'Set global operation mode'
      tags:
        - Operation
      description: 'Sets a new global operation mode for the system.'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/OperationModeUpdateRequest'
      responses:
        '200':
          description: 'Mode update accepted.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OperationModeUpdateResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
        '503':
          $ref: '#/components/responses/ServiceUnavailable'
  /operation/state:
    get:
      summary: 'Get global operation state'
      tags:
        - Operation
      description: 'Retrieves the current global operation state of the system (e.g., "normal", "standby").'
      responses:
        '200':
          description: 'Current operation state.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OperationStateResponse'
        '503':
          $ref: '#/components/responses/ServiceUnavailable'
    post:
      summary: 'Set global operation state'
      tags:
        - Operation
      description: 'Sets a new global operation state for the system.'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/OperationStateUpdateRequest'
      responses:
        '200':
          description: 'State update accepted.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OperationStateUpdateResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
        '503':
          $ref: '#/components/responses/ServiceUnavailable'
  /temperature/outside:
    get:
      summary: 'Get outside temperature'
      tags:
        - System
      description: 'Retrieves the current outside temperature and the filtered outside temperature.'
      responses:
        '200':
          description: 'Successful response with temperature data.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OutsideTemperatureResponse'
        '503':
          $ref: '#/components/responses/ServiceUnavailable'
  /notifications:
    get:
      summary: 'Get system notifications status'
      tags:
        - System
      description: 'Checks for the presence of hints, warnings, and errors in the system.'
      responses:
        '200':
          description: 'Successful response with notification statuses.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotificationsResponse'
        '503':
          $ref: '#/components/responses/ServiceUnavailable'
  /health:
    get:
      summary: 'Get system health status'
      tags:
        - System
      description: 'Provides a detailed health check of the gateway, including database and Modbus connectivity.'
      responses:
        '200':
          description: 'System is healthy or degraded.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HealthResponse'
        '503':
          description: 'System is unhealthy.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HealthResponse'
components:
  schemas:
    OperationMode:
      type: string
      enum: ['auto', 'heating', 'cooling', 'manual heating', 'manual cooling']
      example: 'auto'
    OperationState:
      type: string
      enum: ['normal', 'reduced', 'standby', 'scheduled', 'party', 'holiday']
      example: 'normal'
    BaseInfo:
      type: object
      properties:
        id:
          type: integer
          example: 1
        label:
          type: string
          example: 'First Floor'
    ZoneInfo:
      type: object
      properties:
        id:
          type: integer
          example: 1
        label:
          type: string
          example: 'Living Room'
    Temperature:
      type: object
      properties:
        value:
          type: number
          format: float
          example: 21.5
        unit:
          type: string
          enum: ['°C', '°F']
          example: '°C'
    Zone:
      type: object
      properties:
        base:
          $ref: '#/components/schemas/BaseInfo'
        zone:
          $ref: '#/components/schemas/ZoneInfo'
        state:
          $ref: '#/components/schemas/OperationState'
        temperature:
          $ref: '#/components/schemas/Temperature'
        setpoint:
          $ref: '#/components/schemas/Temperature'
          nullable: true
        relative_humidity:
          type: integer
          example: 45
        address:
          type: integer
          example: 1300
    ZonesListResponse:
      type: object
      properties:
        zones:
          type: array
          items:
            $ref: '#/components/schemas/Zone'
        count:
          type: integer
          example: 8
    ZoneUpdateRequest:
      type: object
      properties:
        state:
          $ref: '#/components/schemas/OperationState'
        setpoint:
          type: number
          format: float
          description: "New temperature setpoint. Ignored if state is set to 'off'."
          example: 22.5
      minProperties: 1
    ZoneUpdateResponse:
      type: object
      properties:
        base:
          $ref: '#/components/schemas/BaseInfo'
        zone:
          $ref: '#/components/schemas/ZoneInfo'
        updated:
          type: object
          properties:
            state:
              type: string
            setpoint:
              type: number
      required:
        - base
        - zone
        - updated
    OperationModeResponse:
      type: object
      properties:
        mode:
          $ref: '#/components/schemas/OperationMode'
    OperationModeUpdateRequest:
      type: object
      required:
        - mode
      properties:
        mode:
          $ref: '#/components/schemas/OperationMode'
    OperationModeUpdateResponse:
      type: object
      properties:
        status:
          type: string
          example: 'success'
        mode:
          $ref: '#/components/schemas/OperationMode'
    OperationStateResponse:
      type: object
      properties:
        state:
          $ref: '#/components/schemas/OperationState'
    OperationStateUpdateRequest:
      type: object
      required:
        - state
      properties:
        state:
          $ref: '#/components/schemas/OperationState'
    OperationStateUpdateResponse:
      type: object
      properties:
        status:
          type: string
          example: 'success'
        state:
          $ref: '#/components/schemas/OperationState'
    OutsideTemperatureResponse:
      type: object
      properties:
        outside_temperature:
          $ref: '#/components/schemas/Temperature'
        filtered_outside_temperature:
          $ref: '#/components/schemas/Temperature'
    NotificationsResponse:
      type: object
      properties:
        hints_present:
          type: boolean
          example: false
        warnings_present:
          type: boolean
          example: true
        errors_present:
          type: boolean
          example: false
    HealthResponse:
      type: object
      properties:
        status:
          type: string
          enum: [healthy, degraded, unhealthy]
          example: 'healthy'
        version:
          type: string
          example: '2.1.0'
        database:
          type: object
          properties:
            healthy:
              type: boolean
            type:
              type: string
            details:
              type: string
        modbus:
          type: object
          properties:
            healthy:
              type: boolean
            circuit_breaker:
              type: object
              properties:
                state:
                  type: string
                failures:
                  type: integer
        configuration:
          type: object
          properties:
            server_type:
              type: string
            api_auth_enabled:
              type: boolean
            fallback_enabled:
              type: boolean
    Error:
      type: object
      properties:
        error:
          type: string
        status:
          type: integer
        details:
          type: object
          nullable: true
      required:
        - error
        - status
  responses:
    BadRequest:
      description: 'Bad request (e.g., validation error)'
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
    ServiceUnavailable:
      description: 'Service unavailable (e.g., Modbus communication error)'
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
    InternalError:
      description: 'Internal server error'
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
